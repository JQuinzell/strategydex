var app = angular.module('PokemonServices', []);

app.factory('pokedex', ['$http', '$q', function($http, $q){
  var pokeObj = {};
  var apiPath = "api/v1/";
  pokeObj.all = function(){
    return $http.get('<%= asset_path("pokedex.json") %>', {cache: true});
  };
  pokeObj.find = function(id){
    var d = $q.defer();
    $http.get(apiPath + 'pokemons/' + id, {cache: true}).success(function(data){
      d.resolve(data);
    });
    return d.promise;
  };
  pokeObj.damaging_moves = function(id){
    var d = $q.defer();
    $http.get(apiPath + 'moves/?pokemon=' + id + '&damage=true', {cache: true}).success(function(data){
      for(var i = 0; i<data.length; i++){
        data[i].type = data[i].move_type
        delete data[i].move_type
      }
      d.resolve(data);
    });
    return d.promise;
  };
  pokeObj.moves_for = function(poke){
    var d = $q.defer();
    $http.get(apiPath + 'moves/?pokemon=' + poke, {cache: true}).success(function(data){
      for(var i = 0; i<data.length; i++){
        data[i].type = data[i].move_type
        delete data[i].move_type
      }
      d.resolve(data);
    });
    return d.promise;
  }
  
  return pokeObj;
}]);

app.factory('typeMapping', function(){
  var type_map = {};
  type_map.normal = {weaknesses: ["fighting"], resistances: [], immunities: ["ghost"]};
  type_map.fighting = {weaknesses: ["flying", "psychic", "fairy"], resistances: ["rock", "bug", "dark"], immunities: []};
  type_map.flying = {weaknesses: ["rock", "electric", "ice"], resistances: ["fighting", "bug", "grass"], immunities: ["ground"]};
  type_map.poison = {weaknesses: ["ground", "psychic"], resistances: ["fighting", "poison", "bug", "grass", "fairy"], immunities: []};
  type_map.ground = {weaknesses: ["water", "grass", "ice"], resistances: ["poison", "rock"], immunities: ["electric"]};
  type_map.rock = {weaknesses: ["fighting", "ground", "water", "grass", "steel"], resistances: ["normal", "flying", "poison", "fire"], immunities: []};
  type_map.bug = {weaknesses: ["flying", "rock", "fire"], resistances: ["fighting", "ground", "grass"], immunities: []};
  type_map.ghost = {weaknesses: ["ghost", "dark"], resistances: ["poison", "bug"], immunities: ["normal", "fighting"]};
  type_map.steel = {weaknesses: ["fighting", "ground", "fire"], resistances: ["normal", "flying", "rock", "bug", "steel", "grass", "psychic", "ice", "dragon", "fairy"], immunities: ["poison"]};
  type_map.fire = {weaknesses: ["ground", "rock", "water"], resistances: ["bug", "steel", "fire", "grass", "ice", "fairy"], immunities: []};
  type_map.water = {weaknesses: ["grass", "electric"], resistances: ["steel", "fire", "water", "ice"], immunities: []};
  type_map.grass = {weaknesses: ["flying", "poison", "bug", "fire", "ice"], resistances: ["ground", "water", "grass", "electric"], immunities: []};
  type_map.electric = {weaknesses: ["ground"], resistances: ["flying", "steel", "electric"], immunities: []};
  type_map.psychic = {weaknesses: ["bug", "ghost", "dark"], resistances: ["fighting", "psychic"], immunities: []};
  type_map.ice = {weaknesses: ["fighting", "rock", "steel", "fire"], resistances: ["ice"], immunities: []};
  type_map.dragon = {weaknesses: ["dragon", "ice", "fairy"], resistances: ["fire", "water", "grass", "electric"], immunities: []};
  type_map.dark = {weaknesses: ["fighting", "bug", "fairy"], resistances: ["ghost", "dark"], immunities: ["psychic"]};
  type_map.fairy = {weaknesses: ["poison", "steel"], resistances: ["fighting", "bug", "dark"], immunities: ["dragon"]};
  //abilities
  type_map["volt absorb"] = {weaknesses: [], resistances: [], immunities: ["electric"]};
  type_map["sap sipper"] = {weaknesses: [], resistances: [], immunities: ["grass"]};
  type_map["water absorb"]  = {weaknesses: [], resistances: [], immunities: ["water"]};
  type_map["storm drain"] = {weaknesses: [], resistances: [], immunities: ["water"]};
  type_map["flash fire"] = {weaknesses: [], resistances: [], immunities: ["fire"]};
  type_map["dry skin"] = {weaknesses: ["fire"], resistances: [], immunities: ["water"]};
  type_map.heatproof = {weaknesses: [], resistances: ["fire"], immunities: []};
  type_map["thick fat"] = {weaknesses: [], resistances: ["fire", "ice"], immunities: []};
  type_map.lightningrod = {weaknesses: [], resistances: [], immunities: ["electric"]};
  type_map.levitate = {weaknesses: [], resistances: [], immunities: ["ground"]};
  type_map["motor drive"] = {weaknesses: [], resistances: [], immunities: ["electric"]};

  return type_map;
});

app.factory('weaknessChecker', ['typeMapping', function(typeMapping){
  var service = {};
  
  service.type_multipliers = function(pokemon) {
//     console.log(pokemon);
    var multipliers = {};
    var types = [];
    for(var t = 0; t<pokemon.types.length; t++){
      types.push(pokemon.types[t].name)
    }

    for(var i = 0; i<types.length; i++){
      //current type in provided types
      var current_type = types[i];
      //cycle through weaknesses of current type
      for(var j = 0; j<typeMapping[current_type].weaknesses.length; j++){
        var weakness = typeMapping[current_type].weaknesses[j];
        if(multipliers[weakness] === undefined){
          multipliers[weakness] = 1;
        }
        multipliers[weakness] *= 2;
      }
      for(var k = 0; k<typeMapping[current_type].resistances.length; k++){
        var resistance = typeMapping[current_type].resistances[k];
        if(multipliers[resistance] === undefined){
          multipliers[resistance] = 1;
        }
        multipliers[resistance] /= 2;
      }
      for(var l = 0; l<typeMapping[current_type].immunities.length; l++){
        var immunity = typeMapping[current_type].immunities[l];
        multipliers[immunity] = 0;
      }
    }
//     console.info(pokemon.name);
//     console.info(multipliers);
    return multipliers;
  }
  
  function typify(pokemon){
    var result = [];
    //Add relevant abilities to type array
    for(var i = 0; i<pokemon.abilities.length; i++){
      name = pokemon.abilities[i].name
      if(typeMapping[name] !== undefined){
        result.push(name);
      }
    }
    //Add types
    for(var i = 0; i<pokemon.types.length; i++){
      result.push(pokemon.types[i].name);
    }
    
    return result;
  }

  service.weakness_score = function(multipliers){
    var score = 0;
    for(var multiplier in multipliers){
      switch(multipliers[multiplier]){
        case 2:
          score++;
          break;
        case 4:
          score += 2;
          break;
      }
    }
    return score;    
  }

  service.defender_score = function(multipliers, defended_multipliers, reasons){
    var score = 0;
    if(reasons === undefined){
      reasons = [];
    }
    for(var type in multipliers){
      var defended_mult = defended_multipliers[type];
      if(defended_mult >= 2){
        switch(multipliers[type]){
          case 0:
//             console.info("Immune - adding", defended_mult === 2 ? 2 : 2.5);
            if(defended_mult === 2){
              score += 2;
              reasons.push("Immune to weakness: " + type);
            } else {
              score += 2.5;
              reasons.push("Immune to 4x weakness: " + type);
            }
            break;
          case 0.5:
//             console.info("Resists, adding", defended_mult === 2 ? 1 : 1.5);
            if(defended_mult === 2){
              score += 1;
              reasons.push("Resists weakness: " + type);
            } else {
              score += 1.5;
              reasons.push("Resists 4x weakness: " + type);
            }
            break;
          case 0.25:
//             console.info("4x Resists, adding", defended_mult === 2 ? 1.5 : 2);
            if(defended_mult === 2){
              score += 1.5;
              reasons.push("4x Resists weakness: " + type);
            } else {
              score += 2;
              reasons.push("4x Resists 4x weakness: " + type);
            }
            break;
          case 2:
//             console.info("Weak, subtracting", defended_mult === 2 ? 1 : 1.5);
            if(defended_mult === 2){
              score -= 1;
              reasons.push("Weak to weakness: " + type);
            } else {
              score -= 1.5;
              reasons.push("Weak to 4x weakness: " + type);
            }
            break;
          case 4:
//             console.info("4x Weak, subtracting", defended_mult === 2 ? 1.5 : 2);
            if(defended_mult === 2){
              score -= 1.5;
              reasons.push("4x Weak to weakness: " + type);
            } else {
              score -= 2;
              reasons.push("4x Weak to 4x weakness: " + type);
            }
            break;
        }
      }
    }    
    return score;
  }
  
  service.check_synergy = function(defender, defended, reasons){
    var defender_mults = service.type_multipliers(defender);
    var defended_mults = service.type_multipliers(defended);
    
    var defender_score = service.defender_score(defender_mults, defended_mults, reasons);
    var defended_score = service.weakness_score(defended_mults);
    var synergy;
        
//     console.info(defender_mults);
//     console.info(defender_score);
//     console.info(defended_mults);
//     console.info(defended_score);

    synergy = defender_score/defended_score;
    return Math.round(synergy * 100);
  };
    
  service.synergy_scores = function(defender, defended){
    var score = {names: [defender.name], defender_reasons: [], defended_reasons: []};
    var types = [];
    
    for(var i = 0; i<defender.types.length; i++){
      types.push(defender.types[i].name);
    }
    
    score.defender = service.check_synergy(defender, defended, score.defender_reasons);
    score.defended = service.check_synergy(defended, defender, score.defended_reasons);
    score.type = types.join(" ");
    score.total = Math.round((score.defender + score.defended) / 2);
    
    return score;
  };
  
  service.ability_typings = function(pokemon){
    var result = [pokemon];
    for(var i = 0; i< pokemon.abilities.length; i++){
      var ab = pokemon.abilities[i]
      console.log(ab);
      if(typeMapping[ab.name]){
        var poke = {};
        poke.name = pokemon.name;
        poke.types = [];
        for(var j = 0; j<pokemon.types.length; j++){
          poke.types.push(pokemon.types[j]);          
        }
        poke.types.push(ab);
        result.push(poke);
      }
    }
    
    return result;
  };
  
  return service;
}]);

app.factory('statService', [function(){
  var nature_map = {};
  var stats = [{title: "HP", name: "hp"}, {title: "Attack", name: "attack"}, {title: "Defense",name: "defense"}, {title: "Sp. Attack", name: "sp_atk"},{title:"Sp. Defense", name: "sp_def"},{title: "speed",name: "speed"}];

  nature_map.hardy = {};
  nature_map.lonely = {attack: 1.1, defense: .9};
  nature_map.brave = {attack: 1.1, defense: .9};
  nature_map.adamant = {attack: 1.1, speed: .9};
  nature_map.naughty = {attack: 1.1, sp_atk: .9};
  nature_map.bold = {defense: 1.1, attack: .9};
  nature_map.docile = {};
  nature_map.relaxed = {defense: 1.1, speed: .9};
  nature_map.impish = {defense: 1.1, sp_atk: .9};
  nature_map.lax = {defense: 1.1, sp_def: .9};
  nature_map.timid = {speed: 1.1, attack: .9};
  nature_map.hasty = {speed: 1.1, defense: .9};
  nature_map.serious = {};
  nature_map.jolly = {speed: 1.1, sp_atk: .9};
  nature_map.naive = {speed: 1.1, sp_def: .9};
  nature_map.modest = {sp_atk: 1.1, attack: .9};
  nature_map.mild = {sp_atk: 1.1, defense: .9};
  nature_map.quiet = {sp_atk: 1.1, speed: .9};
  nature_map.bashful = {};
  nature_map.rash = {sp_attack: 1.1, sp_defense: .9};
  nature_map.calm = {sp_def: 1.1, attack: .9};
  nature_map.gentle = {sp_def: 1.1, defense: .9};
  nature_map.sassy = {sp_def: 1.1, speed: .9};
  nature_map.careful = {sp_def: 1.1, sp_atk: .9};
  nature_map.quirky = {};
  var service = {};

  //Could be used for any stat bar HP if stat name provided
  service.calc_stat = function(stat, base, iv, ev, nature, level){
    if(iv === undefined) iv = 31;
    if(ev === undefined) ev = 0;
    if(nature === undefined) nature = "quirky";
    if(level === undefined) level = 100;
//     console.log("Function:",stat, base, iv, ev, nature, level);
    var nat_mod = nature_map[nature][stat] || 1;
    if(stat==='hp') {
      return Math.floor(((iv + 2 * base + (Math.round(ev/4))) * level/100) + 10 + level);
    } else {
      return Math.floor(((iv + 2 * base + (Math.round(ev/4))) * level/100 + 5) * nat_mod);
    }
  };
  
  service.set_stats = function(poke){    
    poke.stats = {};
    for(var i = 0; i<stats.length; i++){     
      var stat = stats[i].name
      var base = poke[stat];
      poke.stats[stat] = {};
      poke.stats[stat].ev_val = 0;
      poke.stats[stat].iv_val = 31;
      poke.stats[stat].value = service.calc_stat(stat, base);
    }
  };

  return service;
}]);

app.factory('damageService', ['statService', 'weaknessChecker', function(stats, weaknessChecker){
  var service = {};

  //doesn't consider any modifiers: STAB, type match up,  crit, item, rand
  service.raw_damage = function(attack, defense, power, level) {
    if(level === undefined) level = 100;
//     console.log("raw_damage vars:", attack, defense, power, level);
    var attack_var = Math.floor(2*level/5+2) * power * attack;
    var defense_var = Math.floor(attack_var/defense);
    var result = Math.floor(defense_var/50)+2;
//     console.log("Raw dmg:", result);
    return result;
  };
  
  service.damage_score = function(move, user, target){
    var attack = move.category === "special" ? user.stats.sp_atk.value : user.stats.attack.value;
    var defense = move.category === "special" ? target.stats.sp_def.value : target.stats.defense.value;
    
    var raw = service.raw_damage(attack, defense, move.power, user.level);
    var stab = 1;
    for(var i = 0; i<user.types.length; i++){
      if(user.types[i].name === move.type)
        stab = 1.5;
    }
    var type_mult = weaknessChecker.type_multipliers(target)[move.type];
    type_mult = type_mult === undefined ? 1 : type_mult;
    move.min_dmg = Math.floor(Math.floor(Math.floor(raw*0.85)*stab)*type_mult);
    move.max_dmg = Math.floor(Math.floor(raw*stab)*type_mult);
    var min_percent = (move.min_dmg/target.stats.hp.value)*100;
    move.min_percent = Math.round(min_percent*10)/10;
    var max_percent = (move.max_dmg/target.stats.hp.value)*100;
    move.max_percent = Math.round(max_percent*10)/10;
    return move;
  };
  return service;
}])