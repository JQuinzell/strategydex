var app = angular.module('PokemonServices', []);

app.factory('pokedex', ['$http', '$q', function($http, $q){
  var pokeObj = {};
  var apiPath = "api/v1/pokemons/";
  pokeObj.all = function(){
    return $http.get('<%= asset_path("pokedex.json") %>', {cache: true});
  };
  pokeObj.find = function(id){
    var d = $q.defer();
    $http.get(apiPath + id, {cache: true}).success(function(data){
      d.resolve(data);
    });
    return d.promise;
  };
  
  return pokeObj;
}]);

app.factory('typeMapping', function(){
  var type_map = {};
  type_map.normal = {weaknesses: ["fighting"], resistances: [], immunities: ["ghost"]};
  type_map.fighting = {weaknesses: ["flying", "psychic", "fairy"], resistances: ["rock", "bug", "dark"], immunities: []};
  type_map.flying = {weaknesses: ["rock", "electric", "ice"], resistances: ["fighting", "bug", "grass"], immunities: ["ground"]};
  type_map.poison = {weaknesses: ["ground", "psychic"], resistances: ["fighting", "poison", "bug", "grass", "fairy"], immunities: []};
  type_map.ground = {weaknesses: ["water", "grass", "ice"], resistances: ["poison", "rock"], immunities: ["electric"]};
  type_map.rock = {weaknesses: ["fighting", "ground", "water", "grass", "steel"], resistances: ["normal", "flying", "poison", "fire"], immunities: []};
  type_map.bug = {weaknesses: ["flying", "rock", "fire"], resistances: ["fighting", "ground", "grass"], immunities: []};
  type_map.ghost = {weaknesses: ["ghost", "dark"], resistances: ["poison", "bug"], immunities: ["normal", "fighting"]};
  type_map.steel = {weaknesses: ["fighting", "ground", "fire"], resistances: ["normal", "flying", "rock", "bug", "steel", "grass", "psychic", "ice", "dragon", "fairy"], immunities: ["poison"]};
  type_map.fire = {weaknesses: ["ground", "rock", "water"], resistances: ["bug", "steel", "fire", "grass", "ice", "fairy"], immunities: []};
  type_map.water = {weaknesses: ["grass", "electric"], resistances: ["steel", "fire", "water", "ice"], immunities: []};
  type_map.grass = {weaknesses: ["flying", "poison", "bug", "fire", "ice"], resistances: ["ground", "water", "grass", "electric"], immunities: []};
  type_map.electric = {weaknesses: ["ground"], resistances: ["flying", "steel", "electric"], immunities: []};
  type_map.psychic = {weaknesses: ["bug", "ghost", "dark"], resistances: ["fighting", "psychic"], immunities: []};
  type_map.ice = {weaknesses: ["fighting", "rock", "steel", "fire"], resistances: ["ice"], immunities: []};
  type_map.dragon = {weaknesses: ["dragon", "ice", "fairy"], resistances: ["fire", "water", "grass", "electric"], immunities: []};
  type_map.dark = {weaknesses: ["fighting", "bug", "fairy"], resistances: ["ghost", "dark"], immunities: ["psychic"]};
  type_map.fairy = {weaknesses: ["poison", "steel"], resistances: ["fighting", "bug", "dark"], immunities: ["dragon"]};
  //abilities
  type_map["volt absorb"] = {weaknesses: [], resistances: [], immunities: ["electric"]};
  type_map["sap sipper"] = {weaknesses: [], resistances: [], immunities: ["grass"]};
  type_map["water absorb"]  = {weaknesses: [], resistances: [], immunities: ["water"]};
  type_map["storm drain"] = {weaknesses: [], resistances: [], immunities: ["water"]};
  type_map["flash fire"] = {weaknesses: [], resistances: [], immunities: ["fire"]};
  type_map["dry skin"] = {weaknesses: ["fire"], resistances: [], immunities: ["water"]};
  type_map.heatproof = {weaknesses: [], resistances: ["fire"], immunities: []};
  type_map["thick fat"] = {weaknesses: [], resistances: ["fire", "ice"], immunities: []};
  type_map.lightningrod = {weaknesses: [], resistances: [], immunities: ["electric"]};
  type_map.levitate = {weaknesses: [], resistances: [], immunities: ["ground"]};
  type_map["motor drive"] = {weaknesses: [], resistances: [], immunities: ["electric"]};

  return type_map;
});

app.factory('weaknessChecker', ['typeMapping', function(typeMapping){
  var service = {};
  
  function type_multipliers(pokemon) {
    var multipliers = {};
    var types = typify_abilities(pokemon);
    for(var x = 0; x<pokemon.types.length; x++){
      types.push(pokemon.types[x].name);
    }
    for(var i = 0; i<types.length; i++){
      //current type in provided types
      var current_type = types[i];
      //cycle through weaknesses of current type
      for(var j = 0; j<typeMapping[current_type].weaknesses.length; j++){
        var weakness = typeMapping[current_type].weaknesses[j];
        if(multipliers[weakness] === undefined){
          multipliers[weakness] = 1;
        }
        multipliers[weakness] *= 2;
      }
      for(var k = 0; k<typeMapping[current_type].resistances.length; k++){
        var resistance = typeMapping[current_type].resistances[k];
        multipliers[resistance] = multipliers[resistance] || 1;
        multipliers[resistance] /= 2;
      }
      for(var l = 0; l<typeMapping[current_type].immunities.length; l++){
        var immunity = typeMapping[current_type].immunities[l];
        multipliers[immunity] = 0;
      }
    }
//     console.info(pokemon.name);
//     console.info(multipliers);
    return multipliers;
  }
  
  function typify_abilities(pokemon){
    var result = [];
    for(var i = 0; i<pokemon.abilities.length; i++){
      name = pokemon.abilities[i].name
      if(typeMapping[name] !== undefined){
        result.push(name);
      }
    }
    
    return result;
  }

  service.weakness_score = function(multipliers){
    var score = 0;
    for(var multiplier in multipliers){
      switch(multipliers[multiplier]){
        case 2:
          score++;
          break;
        case 4:
          score += 2;
          break;
      }
    }
    return score;    
  }

  service.defender_score = function(multipliers, defending_multipliers, reasons){
    var score = 0;
    if(reasons === undefined){
      reasons = [];
    }
    for(var type in multipliers){
      var defended_mult = defending_multipliers[type];
      if(defended_mult >= 2){
        switch(multipliers[type]){
          case 0:
//             console.info("Immune - adding", defended_mult === 2 ? 2 : 2.5);
            if(defended_mult === 2){
              score += 2;
              reasons.push("Immune to weakness: " + type);
            } else {
              score += 2.5;
              reasons.push("Immune to 4x weakness: " + type);
            }
            break;
          case 0.5:
//             console.info("Resists, adding", defended_mult === 2 ? 1 : 1.5);
            if(defended_mult === 2){
              score += 1;
              reasons.push("Resists weakness: " + type);
            } else {
              score += 1.5;
              reasons.push("Resists 4x weakness: " + type);
            }
            break;
          case 0.25:
//             console.info("4x Resists, adding", defended_mult === 2 ? 1.5 : 2);
            if(defended_mult === 2){
              score += 1.5;
              reasons.push("4x Resists weakness: " + type);
            } else {
              score += 2;
              reasons.push("4x Resists 4x weakness: " + type);
            }
            break;
          case 2:
//             console.info("Weak, subtracting", defended_mult === 2 ? 1 : 1.5);
            if(defended_mult === 2){
              score -= 1;
              reasons.push("Weak to weakness: " + type);
            } else {
              score -= 1.5;
              reasons.push("Weak to 4x weakness: " + type);
            }
            break;
          case 4:
//             console.info("4x Weak, subtracting", defended_mult === 2 ? 1.5 : 2);
            if(defended_mult === 2){
              score -= 1.5;
              reasons.push("4x Weak to weakness: " + type);
            } else {
              score -= 2;
              reasons.push("4x Weak to 4x weakness: " + type);
            }
            break;
        }
      }
    }    
    return score;
  }
  
  service.check_synergy = function(target_pokemon, defended_pokemon, reasons){
    var target_multipliers = type_multipliers(target_pokemon);
    var defended_multipliers = type_multipliers(defended_pokemon);
    var defended_score = service.weakness_score(defended_multipliers);
    var target_score = service.defender_score(target_multipliers, defended_multipliers, reasons);
    var synergy;
        
//     console.info(target_multipliers);
//     console.info(target_score);
//     console.info(defended_multipliers);
//     console.info(defended_score);

    synergy = target_score/defended_score;
    return Math.round(synergy * 100);
  };
    

  return service;
}]);